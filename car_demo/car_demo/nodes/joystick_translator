#!/usr/bin/env python

# Copyright 2017 Open Source Robotics Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import rospy
from prius_msgs.msg import Control
from sensor_msgs.msg import Joy

# 默认轴映射 - 这些可以通过参数覆盖
STEERING_AXIS = 0  # 方向盘轴
THROTTLE_AXIS = 1  # 油门/刹车轴 (修改为1，适配Parallels Virtual Mouse)


class Translator:
    def __init__(self):
        # 从参数获取轴映射，如果没有设置则使用默认值
        self.steering_axis = rospy.get_param('~steering_axis', STEERING_AXIS)
        self.throttle_axis = rospy.get_param('~throttle_axis', THROTTLE_AXIS)
        
        rospy.loginfo("使用 steering_axis=%d, throttle_axis=%d", 
                     self.steering_axis, self.throttle_axis)
        
        self.sub = rospy.Subscriber("joy", Joy, self.callback)
        self.pub = rospy.Publisher('prius_controls', Control, queue_size=1)
        self.last_published_time = rospy.get_rostime()
        self.last_published = None
        self.timer = rospy.Timer(rospy.Duration(1. / 20.), self.timer_callback)

    def timer_callback(self, event):
        if self.last_published and self.last_published_time < rospy.get_rostime() + rospy.Duration(1.0 / 20.):
            self.callback(self.last_published)

    def callback(self, message):
        rospy.logdebug("joy_translator 接收到轴数据 %s", message.axes)
        
        # 检查摇杆是否有足够的轴
        if len(message.axes) <= self.throttle_axis or len(message.axes) <= self.steering_axis:
            rospy.logwarn("摇杆没有足够的轴 (有 %d 个, 至少需要 %d 个). "
                          "请检查您的摇杆并更新轴映射.",
                          len(message.axes), max(self.throttle_axis, self.steering_axis) + 1)
            return
            
        # 检查摇杆是否有足够的按钮
        if len(message.buttons) < 4:
            rospy.logwarn("摇杆没有足够的按钮 (有 %d 个, 至少需要 4 个). "
                          "请检查您的摇杆配置.",
                          len(message.buttons))
            return
            
        command = Control()
        command.header = message.header
        if message.axes[self.throttle_axis] >= 0:
            command.throttle = message.axes[self.throttle_axis]
            command.brake = 0.0
        else:
            command.brake = message.axes[self.throttle_axis] * -1
            command.throttle = 0.0

        if message.buttons[3]:
            command.shift_gears = Control.FORWARD
        elif message.buttons[1]:
            command.shift_gears = Control.NEUTRAL
        elif message.buttons[0]:
            command.shift_gears = Control.REVERSE
        else:
            command.shift_gears = Control.NO_COMMAND

        command.steer = message.axes[self.steering_axis]
        self.last_published = message
        self.pub.publish(command)


if __name__ == '__main__':
    rospy.init_node('joy_translator')
    t = Translator()
    rospy.spin()
